#!/usr/bin/env python3
# SPDX-License-Identifier: GPL-3.0-only
# Copyright (C) 2023 David Escribano <davidegx@gmail.com>

"""Telegram Bot used for the Carcassonne Spain League.

Daily fetches last day results and upcoming duels
and post them to the Carcassonne Spain group.

------------------------------------------------------------

Usage:
    1. Update config.yml with proper configuration.
    2. Install dependencies: $ pip install -r requirements.txt
    3. $ bin/bot_telegram

Alternatively, using docker:
    1. Update config.yml with proper configuration.
    2. $ docker build -t carcassonnespain .
    3. $ docker run carcassonnespain

------------------------------------------------------------

Development using docker

There is a Dockerfile inside dev/ that install vim with
some plugins and libraries for development:
    1. $ docker build -t carcassonnedev --file dev/Dockerfile .
    2. $ docker run -it --volume $(pwd):/app carcassonnedev
    3. $ vim bin/bot_telegram # or whatever

------------------------------------------------------------
"""
import argparse
from datetime import date, datetime, time, timedelta
from telegram import Update
from telegram.ext import Application, ContextTypes, CommandHandler, MessageHandler

from src.io.telegramCS import Telegram
from src.io import telegram_commands as commands
from src.settings import config


telegram = Telegram()
today = date.today()


async def _send_outcome(context: ContextTypes.DEFAULT_TYPE):
    yesterday = today - timedelta(1)
    await telegram.send_async(context.bot, yesterday, force_schedule=True)


async def _send_schedule(context: ContextTypes.DEFAULT_TYPE):
    await telegram.send_async(context.bot, today)


def main():
    """Run the telegram bot.

    * Bind events so bot monitors when it is added to a group.
    * Create jobs so bot periodically sends messages.
    """
    global today

    parser = argparse.ArgumentParser(description='Telegram Bot')
    parser.add_argument('--today',
                        dest='today',
                        help='Pretends today is a different day')
    parser.add_argument('--now',
                        dest='now',
                        action='store_const',
                        const=True,
                        help='Sends messages now')
    parser.add_argument('--test',
                        dest='test',
                        action='store_const',
                        const=True,
                        help='Do nothing in Telegram, just print message here')

    args = parser.parse_args()
    if args.today:
        today = date.fromisoformat(args.today)

    if args.now:
        next_minute = (datetime.now() + timedelta(seconds=15)).time()
        time_outcome = next_minute
        time_schedule = next_minute
    else:
        time_outcome = time.fromisoformat(config['schedule']['results'])
        time_schedule = time.fromisoformat(config['schedule']['schedule'])

    if args.test:
        telegram.test(today, today)
        quit()

    token = config['telegram']['token']
    application = Application.builder().token(token).build()

    application.add_handler(CommandHandler('help', commands.help))
    application.add_handler(CommandHandler('schedule', commands.schedule))
    application.add_handler(CommandHandler('results', commands.results))

    application.job_queue.run_daily(_send_outcome, time_outcome)
    application.job_queue.run_daily(_send_schedule, time_schedule)

    application.run_polling()


if __name__ == '__main__':
    main()
else:
    raise RuntimeError("Don't know what to do")
