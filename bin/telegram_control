#!/usr/bin/env python3
# SPDX-License-Identifier: GPL-3.0-only
# Copyright (C) 2023 David Escribano <davidegx@gmail.com>

"""Telegram Carcassone Spain *bontrol* Bot.

When run, fetches last day duels outcome and
checks submitted scores are correct.

If they are not, it will message the "control_group"
specified in config.yml.
"""

import argparse
import asyncio
from datetime import date, timedelta
from src.settings import config
from src.cs.league import League
from telegram import constants as tconstants
from telegram.ext import Application

league = League()


# pyright: strict
async def main():
    """Check yesterday duel outcome is correct and notify if needed."""
    parser = argparse.ArgumentParser(description='Telegram Control Bot')
    parser.add_argument('--today',
                        dest='today',
                        help='Pretends today is a different day')
    parser.add_argument('--test',
                        dest='test',
                        action='store_const',
                        const=True,
                        help='Do nothing in Telegram, just print message here')

    args = parser.parse_args()
    if args.today:
        today = date.fromisoformat(args.today)
    else:
        today = date.today()
    yesterday = today - timedelta(1)

    all_good = True
    msg = ""

    for group in league.groups:
        duels = group.wrong_outcome(yesterday)
        if duels:
            all_good = False
            for duel in duels:
                msg += f"⚠️ Dubious duel outcome: {duel.html()}\n"

    if all_good:
        quit()

    if args.test:
        print(msg)
        quit()

    token = config['telegram']['token']
    application = Application.builder().token(token).build()
    bot = application.bot
    group_id = config['telegram']['control_group']['id']
    await bot.send_message(chat_id=group_id,
                           text=msg,
                           parse_mode=tconstants.ParseMode.HTML,
                           disable_web_page_preview=True)

if __name__ == '__main__':
    asyncio.run(main())
else:
    raise RuntimeError("Don't know what to do")
