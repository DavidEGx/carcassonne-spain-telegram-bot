#!/usr/bin/env python3
# SPDX-License-Identifier: GPL-3.0-only
# Copyright (C) 2024 David Escribano <davidegx@gmail.com>

"""Telegram Carcassone Spain *bontrol* Bot.

When run, fetches last day duels outcome and
checks submitted scores are correct.

If they are not, it will message the "control_group"
specified in config.yml.
"""

import argparse
import asyncio
import sys
from datetime import date, timedelta

from telegram import constants as tconstants
from telegram.ext import Application

from src.cs.league import League
from src.settings import config


async def main():
    """Check yesterday duel outcome is correct and notify if needed."""
    parser = argparse.ArgumentParser(description="Telegram Control Bot")
    parser.add_argument(
        "--today", dest="today", help="Pretends today is a different day"
    )
    parser.add_argument(
        "--test",
        dest="test",
        action="store_const",
        const=True,
        help="Do nothing in Telegram, just print message here",
    )
    parser.add_argument(
        "--report",
        dest="report",
        type=int,
        default=1,
        help="Report mode, check number of days passed as parameter",
    )
    parser.add_argument(
        "--season",
        dest="season",
        type=int,
        help="Season, last season is used by default",
    )
    parser.add_argument(
        "--notify_unscheduled",
        dest="unscheduled",
        action="store_const",
        const=True,
        help="If true, send notification for unscheduled matches",
    )

    args = parser.parse_args()
    if args.today:
        today = date.fromisoformat(args.today)
    else:
        today = date.today()

    if args.unscheduled:
        group_id = config["telegram"]["groups"][0]["id"]
        thread_id = config["telegram"]["groups"][0]["thread_id"]
        msg = _unscheduled_duels_msg(args.season)
    else:
        group_id = config["telegram"]["control_group"]["id"]
        thread_id = None
        msg = _outcome_control_msg(args.season, args.report, today)

    if not msg:
        sys.exit(0)

    if args.test:
        print(msg)
        sys.exit(0)

    token = config["telegram"]["token"]
    application = Application.builder().token(token).build()
    bot = application.bot
    kwargs = {
        "chat_id": group_id,
        "text": msg,
        "parse_mode": tconstants.ParseMode.HTML,
        "disable_web_page_preview": True,
    }
    if thread_id:
        kwargs["message_thread_id"] = thread_id

    await bot.send_message(**kwargs)


def _outcome_control_msg(season: int, days: int, today: date) -> str:
    current = today - timedelta(days=days - 1)
    msg = ""

    while current <= today:
        day_before = current - timedelta(days=1)

        for group in League(season=season).groups:
            duels = group.wrong_outcome(day_before)
            for duel in duels:
                msg += f"‚ö†Ô∏è Dubious duel outcome ({current}): {duel.html()}\n"

        current = current + timedelta(days=1)

    return msg


def _unscheduled_duels_msg(season: int) -> str:
    header = "‚ö†Ô∏è <b>Duelos sin fecha</b> ‚ö†Ô∏è"
    footer = "‚è≥ <b>√öltimo d√≠a para jugar:</b> domingo ‚è≥\n"
    footer += "Recuerda que el domingo es el √∫ltimo d√≠a para jugar los duelos. Si no se juega el duelo y no hay comunicaci√≥n previa con el comit√©, ambos jugadores ser√°n dados como perdedores. Adem√°s, se podr√°n aplicar las sanciones correspondientes seg√∫n el reglamento.\n\n"
    footer += "üì© Si tu rival no responde, por favor, contacta con nosotros en laliga@carcassonnespain.es para que podamos ayudarte."

    msg = ""
    for group in League(season=season).groups:
        for unscheduled_duel in group.unschedule():
            player_1 = unscheduled_duel[0]
            player_2 = unscheduled_duel[1]

            name_1 = player_1.telegram or player_1.name
            name_2 = player_2.telegram or player_2.name

            msg += f"{name_1} - {name_2}\n"

    if msg:
        return f"{header}\n\n{msg}\n{footer}"
    return ""


if __name__ == "__main__":
    asyncio.run(main())
else:
    raise RuntimeError("Don't know what to do")
