#!/usr/bin/env python3
# SPDX-License-Identifier: GPL-3.0-only
# Copyright (C) 2022 David Escribano <davidegx@gmail.com>

"""Telegram Bot used for the Carcassonne Spain League.

Daily fetches last day results and upcoming matches
and post them to the Carcassonne Spain group.

Code is very specific to my needs and not very DRY
but... it works :D

------------------------------------------------------------

Usage:
    1. Update config.yml with proper configuration.
    2. Install dependencies: $ pip install -r requirements.txt
    3. $ bin/bot

Alternatively, using docker:
    1. Update config.yml with proper configuration.
    2. $ docker build -t carcassonnespain .
    3. $ docker run carcassonnespain 

------------------------------------------------------------

Development using docker

There is a Dockerfile inside dev/ that install vim with
some plugins and libraries for development:
    1. $ docker build -t carcassonnedev --file dev/Dockerfile .
    2. $ docker run -it --volume $(pwd):/app carcassonnedev
    3. $ vim bin/bot # or whatever

------------------------------------------------------------
"""
import datetime
from telegram.ext import CommandHandler, Filters, MessageHandler, Updater

from src import settings, commands
from src.io import send
from src.settings import config, logger, SUMMARY_DATA


def new_chat_member(update, context):
    """When bot is added to a group, add group to list of groups."""
    m = update.message
    bot = context.bot
    group_id = m.chat.id
    group_title = m.chat.title

    for user in m.new_chat_members:
        # Only interested when the new chat member is the bot itself
        # so the group can be added to group list.
        # Ignore any other user.
        if bot.id == user.id and group_id not in config['telegram']['groups']:
            logger.info(f"Adding new group {group_id} ({group_title})")
            config['telegram']['groups'].append(group_id)

    settings.update()


def main():
    """Run the bot.

    * Bind events so bot monitors when it is added to a group.
    * Create jobs so bot periodically sends messages.
    """
    updater = Updater(token=config['telegram']['token'], use_context=True)
    updater.dispatcher.add_handler(MessageHandler(Filters.status_update.new_chat_members,
                                                  new_chat_member))

    updater.dispatcher.add_handler(CommandHandler('schedule', commands.schedule))
    updater.dispatcher.add_handler(CommandHandler('results', commands.results))

    for summary_type in SUMMARY_DATA.keys():
        times = datetime.time(*list(map(int, config['schedule'][summary_type].split(':'))))
        updater.job_queue.run_daily(send, times, context=summary_type)

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
else:
    raise RuntimeError("Don't know what to do")
